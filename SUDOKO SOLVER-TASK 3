#include <iostream>
#include <vector>
#define N 9 // Size of the Sudoku grid (9x9)

bool isSafeToPlace(const std::vector<std::vector<int>>& board, int row, int col, int num) {
    // Check the row
    for (int x = 0; x < N; x++) {
        if (board[row][x] == num) {
            return false;
        }
    }

    // Check the column
    for (int x = 0; x < N; x++) {
        if (board[x][col] == num) {
            return false;
        }
    }

    // Check the 3x3 sub-grid
    int startRow = row - row % 3;
    int startCol = col - col % 3;
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (board[startRow + i][startCol + j] == num) {
                return false;
            }
        }
    }

    return true;
}

bool solveSudoku(std::vector<std::vector<int>>& board) {
    for (int row = 0; row < N; row++) {
        for (int col = 0; col < N; col++) {
            // Find an empty cell
            if (board[row][col] == 0) {
                for (int num = 1; num <= 9; num++) {
                    // Check if it's safe to place the number
                    if (isSafeToPlace(board, row, col, num)) {
                        board[row][col] = num; // Place the number

                        // Recursively solve the rest of the grid
                        if (solveSudoku(board)) {
                            return true;
                        }

                        // Backtrack if no solution is found
                        board[row][col] = 0;
                    }
                }
                return false; // Trigger backtracking
            }
        }
    }
    return true; // If no empty cell is left, the Sudoku is solved
}

void printBoard(const std::vector<std::vector<int>>& board) {
    for (int row = 0; row < N; row++) {
        for (int col = 0; col < N; col++) {
            std::cout << board[row][col] << " ";
        }
        std::cout << "\n";
    }
}

int main() {
    // 0 represents empty cells
    std::vector<std::vector<int>> board = {
        {5, 3, 0, 0, 7, 0, 0, 0, 0},
        {6, 0, 0, 1, 9, 5, 0, 0, 0},
        {0, 9, 8, 0, 0, 0, 0, 6, 0},
        {8, 0, 0, 0, 6, 0, 0, 0, 3},
        {4, 0, 0, 8, 0, 3, 0, 0, 1},
        {7, 0, 0, 0, 2, 0, 0, 0, 6},
        {0, 6, 0, 0, 0, 0, 2, 8, 0},
        {0, 0, 0, 4, 1, 9, 0, 0, 5},
        {0, 0, 0, 0, 8, 0, 0, 7, 9}
    };

    std::cout << "Original Sudoku:\n";
    printBoard(board);

    if (solveSudoku(board)) {
        std::cout << "\nSolved Sudoku:\n";
        printBoard(board);
    } else {
        std::cout << "\nNo solution exists for the given Sudoku.\n";
    }

    return 0;
}
